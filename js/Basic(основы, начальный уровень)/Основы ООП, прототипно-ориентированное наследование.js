//Изучение ООП и прототипирования
"use strict";                           //строгий режим

let str = "some";                       //создадим переменную = значение 
let strObj = new String(str);           //создадим переменную = новое значение полученое в результате перевода символов(str) в строку

console.log(typeof(str));               //вывести в консоль результат для проверки(какой тип у (str))  --- получим строку
console.log(typeof(strObj));            //вывести в консоль результат для проверки(какой тип у (strObj)) ---получим объект

console.dir([1, 2, 3]);                 //вывести массив и его свойства 


/****************Работа с объектами*******************/

const soldier = {                       //создать объект soldier и выполни ниже
    health: 400,                        //создать свойство health присвоить 400
    armor: 100,                         //создать свойство armor присвоить 100
    sayHello: function() {              //создать свойство seyhello присвоить значение функции которая выполнит ниже 
        console.log("Hello");           //вывести в консоль 'Hello'
    }
};
const jonh = Object.create(soldier);    //правильный вариант создание прототипирование -- создать объект jonh = объект.создать из другого (soldier) 

/* В данном разделе важно обратить внимание, что у нас есть прототип(другими словами шаблон) и свойство этого прототипа мы можем передать. 
К примеру мы создаем игру с солдатами, мы знаем что у солдат есть параметр: жизнь(health) и броня(armor). Что бы каждому новому персонажу не вводить эти свойства
мы можем создать прототип который будем копировать эти свойства.

/*данный раздел можно раскоментировать для проверки*/

/*const jonh = {                        //создадим объект джон и присвоим ниже
    health: 100                         //свойство healt присвоить значение 100
};

jonh.__proto__ = soldier;               //старый формат присвоения объект jonh.прототипировать = объект soldier (т.е. перенести его свойства healt уже есть а armor нет его нужно добавить)

Object.setPrototypeOf(jonh, soldier);   //второй вариант создания объект. соединить выборку свойств объектов (в объект jonh, из объекта soldier)
*/
console.log(jonh.armor);                //вывести в консоль результат (объект jonh. cвойство armor которое мы не создавали а наследовали от прототипа)
jonh.sayHello();                        //в созданном новом объекте запустить функцию в sayHello

